class Snake{

    static int NONE; // pause
    static int UP;
    static int DOWN;
    static int LEFT;
    static int RIGHT;

    field Array segments;
    field int direction;
    field int length;
    field int size;
    
    constructor Snake new() {
        // initialization
        let NONE = 0;
        let UP = 1;
        let DOWN = 2;
        let LEFT = 3;
        let RIGHT = 4;

        // initial states
        let direction = NONE; // not move
        let length = 1;
        let size = 8;

        let segments = Array.new(100);
        let segments[0] = 256;
        let segments[1] = 128;

        return this;
    }


    method void move() {
        // 1. old head
        // 2. calculate new head
        // 3. move body
        // 4. update
        
        var int i, oldX, oldY, newX, newY;

        oldX = segments[0];
        oldY = segments[1];

        if (direction = UP) { let newY = oldY - size; }
        if (direction = DOWN) { let newY = oldY + size; }
        if (direction = LEFT) { let newX = oldX - size; }
        if (direction = RIGHT) { let newX = oldX + size; }

        let i = (length * 2) - 1;
        while (i > 1) {
            let segments[i] = segments[i - 2];
            let i = i - 1;
        }

        let segments[0] = newX;
        let segments[1] = newY;

        return;
    }

    method void grow(){
        // 1. find last segment
        // 2. add new segment
        // 3. increse length
        
        let lastX = [(length * 2) - 2];
        let lastY = [(length * 2) - 1];

        let segment[(length * 2)] = lastX;
        let segment[(length * 2) + 1] = lastY;
        let length = length + 1;

        return;
    }

    method boolean checkCollision(int x, int y){
        var int i;
        var boolean collision;
        collision = false;

        // wall
        if ((x > 511) | (y > 255) | (x < 0) | (y < 0)) {
            let collision = true;
        }

        // body
        let i = 2;
        while (i < (length * 2)) {
            if ((segments[i] = x) & (segments[i + 1] = y)) {
                let collision = ture;
            }
            let i = i + 2;
        }

        return collision;

    }

    method void setDirection(int newDirection) {
        
        if (direction = UP) & (newDirection = DOWN) { return; }
        if (direction = DOWN) & (newDirection = UP) { return; }
        if (direction = LEFT) & (newDirection = RIGHT) { return; }
        if (direction = RIGHT) & (newDirection = LEFT) { return; }

        let direction = newDirection;

        return;
    }

    method void draw() {
        var int x, y, i;
        let i = 0;
        
        while (i < (length * 2)) {
            let x = segments[i];
            let y = segments[i + 1];

            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size - 1, y + size - 1);

            let i = i + 2;
        }
        return ;
    }
}

